meta {
  name: Add Vulnerability with Instance
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/api/project/vulnerability/add/vulnerability/
  body: json
  auth: bearer
}

auth:bearer {
  token: {{token}}
}

body:json {
  {
    "vulnerabilityname": "XXE",
    "vulnerabilityseverity": "None",
    "cvssscore": 0.0,
    "cvssvector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "status": "Accepted Risk",
    "vulnerabilitydescription": "<p>Information disclosure, also known as information leakage, is when a website unintentionally reveals sensitive information to its users. Depending on the context, websites may leak all kinds of information to a potential attacker, including:</p>\\n\\n<ul>\\n\\t<li>Data about other users, such as usernames or financial information</li>\\n\\t<li>Sensitive commercial or business data</li>\\n\\t<li>Technical details about the website and its infrastructure</li>\\n</ul>\\n\\n<p>The dangers of leaking sensitive user or business data are fairly obvious, but disclosing technical information can sometimes be just as serious. Although some of this information will be of limited use, it can potentially be a starting point for exposing an additional attack surface, which may contain other interesting vulnerabilities. The knowledge that you can gather could even provide the missing piece of the puzzle when trying to construct complex, high-severity attacks.</p>",
    "POC": "test",
    "vulnerabilitysolution": "<p>Preventing information disclosure completely is tricky due to the huge variety of ways in which it can occur. However, there are some general best practices that you can follow to minimize the risk of athese kinds of vulnerability creeping into your own websites.</p>\\n\\n<ul>\\n\\t<li>Make sure that everyone involved in producing the website is fully aware of what information is considered sensitive. Sometimes seemingly harmless information can be much more useful to an attacker than people realize. Highlighting these dangers can help make sure that sensitive information is handled more securely in general by your organization.</li>\\n\\t<li>Audit any code for potential information disclosure as part of your QA or build processes. It should be relatively easy to automate some of the associated tasks, such as stripping developer comments.</li>\\n\\t<li>Use generic error messages as much as possible.</li>",
    "vulnerabilityreferlnk": "Another Ckedior",
    "cwe": [
      "CWE-564: SQL Injection: Hibernate",
      "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
    ],
    "project": 1,
    "instance": [
      {
        "URL": "http://xss.com/#/search",
        "Parameter": "",
        "status": "Confirm Fixed" //STATUS_CHOICES = [Vulnerable,Confirm Fixed, Accepted Risk]
      },
      {
        "URL": "http://10.10.14.68/ftp/coupons_2013.md.bak",
        "Parameter": "",
        "status": "Accepted Risk"
      }
    ]
  }
}
